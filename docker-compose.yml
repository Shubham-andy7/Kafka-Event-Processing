version: '3.9'  # Updated version to a non-obsolete one

services:
  backend:
    build: ./backend
    container_name: backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Point to Kafka broker
    restart: on-failure  # Restart if fails due to Kafka unavailability
  
  dashboard:
    build: ./dashboard
    container_name: dashboard
    ports:
      - "5001:5000"
    volumes:
      - ./dashboard:/app
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # Point to Kafka broker
    restart: on-failure  # Restart if fails due to Kafka unavailability

  frontend:
    container_name: frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
    image: nginx:alpine

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  # Added this line to fix the environment issue
    depends_on:
      - zookeeper

  zookeeper:
    image: zookeeper:3.7  # Updated Zookeeper image
    ports:
      - "2181:2181"

  spark-streaming:
    build: ./streaming
    container_name: spark-streaming
    depends_on:
      - kafka
      - mongodb
    volumes:
      - ./streaming:/app
    environment:
      - PYSPARK_PYTHON=python3  # Set Python version if required
      - PYSPARK_DRIVER_PYTHON=python3
    command: python /app/spark_streaming.py
    restart: always

  mongodb:
    image: mongo:4.4  # Added MongoDB service
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db  # Persist MongoDB data
